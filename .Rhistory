View(df_tr)
#lag_k라는 함수 만듦
#lag_k()기능 : k만큼 lag을 줌
lag_k = function (x,k) c(matrix(NA,k), x[1:(length(x)-k)])
#### rsqure를 최대화 시키는 법####
#data=0, row=30개, col=1개인 행렬
rsqmat = matrix(0,30,1)
rsqmat
#1부터 30까지 반복
for (i in 1:30){
#경제지표 데이터 독립변수 선언★
tr_x = df_tr[,3:29]
#부동산가격 데이터 종속변수 선언★
tr_y  = df_tr[,30:46]
#j부터 tr_x의 열 수 까지 반복
for (j in 1:ncol(tr_x)){
#tr_x에 1~30 Lag을 줌
tr_x[,j] = lag_k(tr_x[,j], k = i)
}
#cbind()함수 : 벡터를 묶어 행렬로 표현
#경제지표데이터에 Time Lag을 설정하고 df에 저장
df = cbind(tr_x, tr_y)
#na.omit()함수 : NA가 들어있는 열 모두 삭제
#즉 df2는 test를 위한 matrix..
df2= na.omit(df)
#리니어 리그레션,, 경제지표와 부동산 가격
fit = lm(df2$전국~ ., data = df2[1:28])
summ = summary(fit)
#summary에서 나온 r square값을 rsqmat라는 행렬 변수에 1부터 30까지 저장
rsqmat[i,] = summ$r.squared
#rsquare가 최대일 때 출력
print(max(rsqmat))
}
colors()
#시각화
#plot()함수 : 산점도 rsqmat를, type="l"선으로 표현, lwd는 선의 굵기, col은 색깔
plot(rsqmat, type = "l", lwd = 2, col="plum2")
#d의 출력값 NA NA 1 2 3 4 5 6 7 8
#lenght는 그대로고 lag을 2준 형태
diff(d)
#1부터 30까지 반복
for (i in 1:30){
#경제지표 데이터 독립변수 선언★
tr_x = df_tr[,3:29]
#부동산가격 데이터 종속변수 선언★
tr_y  = df_tr[,30:46]
#j부터 tr_x의 열 수 까지 반복
for (j in 1:ncol(tr_x)){
#tr_x에 1~30 Lag을 줌
tr_x[,j] = lag_k(tr_x[,j], k = i)
}
#cbind()함수 : 벡터를 묶어 행렬로 표현
#경제지표데이터에 Time Lag을 설정하고 df에 저장
df = cbind(tr_x, tr_y)
#na.omit()함수 : NA가 들어있는 열 모두 삭제
#즉 df2는 test를 위한 matrix..
df2= na.omit(df)
#리니어 리그레션,, 경제지표와 부동산 가격
fit = lm(df2$전국~ ., data = df2[1:28])
summ = summary(fit)
#summary에서 나온 r square값을 rsqmat라는 행렬 변수에 1부터 30까지 저장
rsqmat[i,] = summ$r.squared
}
#rsquare가 최대일 때 출력
print(max(rsqmat))
#독립변수 선행지표들
tr_x = df_tr[,3:46]
#종속변수 부동산가격
tr_y  = df_tr[,30:46]
for (j in 1:ncol(tr_x)){
tr_x[,j] = lag_k(tr_x[,j], k = 6)
}
df = cbind(tr_x, tr_y)
nrow(df)
tr = df[1:100,]
ts = df[101:nrow(df),]
df2= na.omit(tr)
nrow(df2)
names(df2)
fit = lm(df2$전국~ ., data = df2[1:44])
summ = summary(fit)
print(summ$r.squared)
pred = predict(fit,ts)
plot(ts$전국, type = "l", ylim = c(50,120))
points(pred, type = "l", col ="blue")
lag_dat = function(tr,k){
for (j in 1:ncol(tr)){
tr[,j] = lag_k(tr[,j], k )
}
return(tr)
}
#install.packages("glmnet")
library(glmnet)
library(rpart)
library(randomForest)
#독립변수 선행지표들
tr_x = df_tr[,3:46]
#종속변수 부동산가격
tr_y  = df_tr[,30:46]
for (j in 1:ncol(tr_x)){
tr_x[,j] = lag_k(tr_x[,j], k = 6)
}
df = cbind(tr_x, tr_y)
nrow(df)
tr = df[1:100,]
ts = df[101:nrow(df),]
df2= na.omit(tr)
nrow(df2)
names(df2)
fit = lm(df2$전국~ ., data = df2[1:44])
summ = summary(fit)
print(summ$r.squared)
pred = predict(fit,ts)
plot(ts$전국, type = "l", ylim = c(50,120))
points(pred, type = "l", col ="blue")
lag_dat = function(tr,k){
for (j in 1:ncol(tr)){
tr[,j] = lag_k(tr[,j], k )
}
return(tr)
}
#install.packages("glmnet")
library(glmnet)
library(rpart)
library(randomForest)
ret = lag_dat(df_tr[,3:46],36)
#fix(ret)
nrow(newdat)
newdat = cbind(ret,tr_y)
newdat = cbind(ret,tr_y)
newdat =na.omit(newdat)
nrow(newdat)
newdat_tr = newdat[1:80,]
names(newdat_tr)
library(pls)
#help(lm)
model = lm(newdat_tr$서울특별시~ ., data = newdat_tr[,1:44])
fit = stepAIC(model, direction = "both", trace = FALSE)
#fit = plsr(newdat_tr$서울특별시~ ., data = newdat_tr[,1:44])
### lasso
names(newdat_tr)
cv.lasso <- cv.glmnet(x=as.matrix(newdat_tr[,1:44]), y=as.matrix(newdat_tr$서울특별시), alpha=1)
pred = predict(cv.lasso,as.matrix(newdat_tr[,1:44]) )
pred = predict(fit,newdat_tr[,1:44])
names(newdat_tr)
plot(newdat_tr$서울특별시, type = "l", ylim = c(50,120), lwd = 3)
points(pred, type = "l", col ="blue",lwd =2)
cv.lasso <- cv.glmnet(x=as.matrix(newdat_tr[,1:44]), y=as.matrix(newdat_tr$서울특별시), alpha=1)
pred = predict(cv.lasso,as.matrix(newdat_tr[,1:44]) )
#pred = predict(fit,newdat_tr[,1:44])
names(newdat_tr)
plot(newdat_tr$서울특별시, type = "l", ylim = c(50,120), lwd = 3)
points(pred, type = "l", col ="blue",lwd =2)
ph2 = newdat[c(nrow(newdat_tr)+1):c(nrow(newdat)),1:44]
#fix(ph2)
nrow(ph2)
ncol(ph2)
pred2 = predict(fit,ph2)
pred2 = predict(cv.lasso,as.matrix(ph2[,1:44]))
plot(ph2$서울특별시, type = "o",lwd = 2, col = "red", xlim = c(0,100),ylim = c(80,110))
points(pred2, type = "o",lwd = 2)
names(newdat_tr)
cv.lasso <- cv.glmnet(x=as.matrix(newdat_tr[,1:44]), y=as.matrix(newdat_tr$서울특별시), alpha=1)
pred = predict(cv.lasso,as.matrix(newdat_tr[,1:44]) )
#pred = predict(fit,newdat_tr[,1:44])
names(newdat_tr)
plot(newdat_tr$서울특별시, type = "l", ylim = c(50,120), lwd = 3)
points(pred, type = "l", col ="blue",lwd =2)
nrow(newdat_tr)
ph2 = newdat[c(nrow(newdat_tr)+1):c(nrow(newdat)),1:44]
#fix(ph2)
nrow(ph2)
ncol(ph2)
pred2 = predict(cv.lasso,as.matrix(ph2[,1:44]))
plot(ph2$서울특별시, type = "o",lwd = 2, col = "red", xlim = c(0,100),ylim = c(80,110))
points(pred2, type = "o",lwd = 2)
#plot(df_tr$서울특별시, type = "o")
########## phase 2 test
pred3 = predict(fit,df_tr[171:194,2:46])
plot(df_tr$서울특별시[121:nrow(df_tr)], type = "o", col = "blue", lwd = 2)
pred3 = predict(cv.lasso,as.matrix(df_tr[171:194,3:46])) ## lasso fit
plot(df_tr$서울특별시[121:nrow(df_tr)], type = "o", col = "blue", lwd = 2)
#points(pred3, type = "o", ylim = c(80,120), col = "red", lwd = 2)
plot(pred3, type = "o", ylim = c(100,110), col = "red", lwd = 2)
pred3 = predict(fit,df_tr[171:194,2:46])
pred3 = predict(cv.lasso,as.matrix(df_tr[171:194,3:46])) ## lasso fit
plot(df_tr$서울특별시[121:nrow(df_tr)], type = "o", col = "blue", lwd = 2)
#points(pred3, type = "o", ylim = c(80,120), col = "red", lwd = 2)
plot(pred3, type = "o", ylim = c(100,110), col = "red", lwd = 2)
########## phase 2 test
pred3 = predict(fit,df_tr[171:194,2:46])
pred3 = predict(cv.lasso,as.matrix(df_tr[171:194,3:46])) ## lasso fit
plot(df_tr$서울특별시[121:nrow(df_tr)], type = "o", col = "blue", lwd = 2)
#points(pred3, type = "o", ylim = c(80,120), col = "red", lwd = 2)
plot(pred3, type = "o", ylim = c(100,110), col = "red", lwd = 2)
#임의로 벡터 하나 만듦..
d = c(1,2,3,4,5,6,7,8,9,10)
df_tr
ncol(ph2)
pred2 = predict(fit,ph2)
pred2 = predict(cv.lasso,as.matrix(ph2[,1:44]))
plot(ph2$서울특별시, type = "o",lwd = 2, col = "red", xlim = c(0,100),ylim = c(80,110))
points(pred2, type = "o",lwd = 2)
#리니어 리그레션,, 경제지표와 부동산 가격
fit = lm(df2$전국~ ., data = df2[1:28])
summ = summary(fit)
#1부터 30까지 반복
for (i in 1:30){
#경제지표 데이터 독립변수 선언★
tr_x = df_tr[,3:29]
#부동산가격 데이터 종속변수 선언★
tr_y  = df_tr[,30:46]
#j부터 tr_x의 열 수 까지 반복
for (j in 1:ncol(tr_x)){
#tr_x에 1~30 Lag을 줌
tr_x[,j] = lag_k(tr_x[,j], k = i)
}
#cbind()함수 : 벡터를 묶어 행렬로 표현
#경제지표데이터에 Time Lag을 설정하고 df에 저장
df = cbind(tr_x, tr_y)
#na.omit()함수 : NA가 들어있는 열 모두 삭제
#즉 df2는 test를 위한 matrix..
df2= na.omit(df)
#리니어 리그레션,, 경제지표와 부동산 가격
fit = lm(df2$전국~ ., data = df2[1:28])
summ = summary(fit)
#summary에서 나온 r square값을 rsqmat라는 행렬 변수에 1부터 30까지 저장
rsqmat[i,] = summ$adj.r.squared
}
#rsquare가 최대일 때 출력
print(max(rsqmat))
df
diff(df$한국대출금리)
plot(diff(df$한국대출금리),diff(df$전국))
plot(diff(df$원달러환율),diff(df$전국))
plot(diff(df$제조업),diff(df$전국))
plot(diff(df$전국, type = "l")
plot(diff(df$전국, type = "l"))
plot(diff(df$전국), type = "l")
plot(df$원달러환율,diff(df$전국))
plot(rbind(NA, df$원달러환율),diff(df$전국))
rbind(NA, df$원달러환율)
plot(c(NA, df$원달러환율),diff(df$전국))
df$원달러환율)
df$원달러환율
df$전국
df$원달러환율
df$한국대출금리
df$한국대출금리
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/land_anal_test.csv")
df$전국
df$한국대출금리
plot(c(NA, df$한국대출금리),diff(df$전국))
c(NA, df$한국대출금리)
diff(df$전국)
plot( df$한국대출금리,c(NA,diff(df$전국)))
plot(diff(df$원달러환율), type = "l")
plot( df$원달러환율,c(NA,diff(df$전국)))
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/land_anal0524.csv")
#객체의 이름을 반환
names(df)
#df벡터에서 -c(7,8)을 (전국, 서울소비심리지수) 제외한 나머지만
df = df[,-c(7,8)]
df_tr = df
names(df_tr)
View(df_tr)
#1부터 30까지 반복
for (i in 1:30){
#경제지표 데이터 독립변수 선언★
tr_x = df_tr[,3:41]
#부동산가격 데이터 종속변수 선언★
tr_y  = df_tr[,42:52]
#j부터 tr_x의 열 수 까지 반복
for (j in 1:ncol(tr_x)){
#tr_x에 1~30 Lag을 줌
tr_x[,j] = lag_k(tr_x[,j], k = i)
}
#cbind()함수 : 벡터를 묶어 행렬로 표현
#경제지표데이터에 Time Lag을 설정하고 df에 저장
df = cbind(tr_x, tr_y)
#na.omit()함수 : NA가 들어있는 열 모두 삭제
#즉 df2는 test를 위한 matrix..
df2= na.omit(df)
#리니어 리그레션,, 경제지표와 부동산 가격
fit = lm(df2$전국~ ., data = df2[1:28])
summ = summary(fit)
#summary에서 나온 r square값을 rsqmat라는 행렬 변수에 1부터 30까지 저장
rsqmat[i,] = summ$adj.r.squared
}
#lag_k라는 함수 만듦
#lag_k()기능 : k만큼 lag을 줌
lag_k = function (x,k) c(matrix(NA,k), x[1:(length(x)-k)])
#경제지표 데이터 독립변수 선언★
tr_x = df_tr[,3:43]
names(tr_x)
#경제지표 데이터 독립변수 선언★
tr_x = df_tr[,3:41]
names(tr_x)
#부동산가격 데이터 종속변수 선언★
tr_y  = df_tr[,42:60]
#부동산가격 데이터 종속변수 선언★
tr_y  = df_tr[,42:58]
names(tr_y)
#tr_x에 6개월 Lag을 줌
tr_x[,4] = lag_k(tr_x[,4], k = 6)
View(tr_x)
plot(df$한국대출금리,c(NA,df$코스피지수평균))
plot(df$한국대출금리,c(NA,df$코스피지수평균))
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/land_anal0524.csv")
#객체의 이름을 반환
names(df)
View(df)
#df벡터에서 -c(7,8)을 (전국, 서울소비심리지수) 제외한 나머지만
df = df[,-c(7,8)]
df_tr = df
names(df_tr)
View(df_tr)
#lag_k라는 함수 만듦
#lag_k()기능 : k만큼 lag을 줌
lag_k = function (x,k) c(matrix(NA,k), x[1:(length(x)-k)])
#경제지표 데이터 독립변수 선언★
tr_x = df_tr[,3:41]
names(tr_x)
#부동산가격 데이터 종속변수 선언★
tr_y  = df_tr[,42:58]
names(tr_y)
#tr_x에 6개월 Lag을 줌
tr_x[,4] = lag_k(tr_x[,4], k = 6)
View(tr_x)
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/land_anal0524.csv")
#객체의 이름을 반환
names(df)
View(df)
#df벡터에서 -c(7,8)을 (전국, 서울소비심리지수) 제외한 나머지만
df = df[,-c(7,8)]
df_tr = df
names(df_tr)
View(df_tr)
#lag_k라는 함수 만듦
#lag_k()기능 : k만큼 lag을 줌
lag_k = function (x,k) c(matrix(NA,k), x[1:(length(x)-k)])
#경제지표 데이터 독립변수 선언★
tr_x = df_tr[,3:41]
names(tr_x)
#부동산가격 데이터 종속변수 선언★
tr_y  = df_tr[,42:58]
names(tr_y)
#tr_x에 6개월 Lag을 줌
tr_x[,31] = lag_k(tr_x[,31], k = 6)
View(tr_x)
plot(df$코스피지수평균,c(NA,df$한국대출금리))
df$한국대출금리
df$코스피지수평균
write.csv()
write.csv(tr_x)
write.csv(tr_x,"C:/Users/kimna/Desktop/졸업작품/test0524.csv")
tr_y[,1] = lag_k(tr_y[,1], k = 6)
tr_y[,1] = lag_k(tr_y[,1], k = 6)
write.csv(tr_x,"C:/Users/kimna/Desktop/졸업작품/test0524.csv")
tr_y[,1] = lag_k(tr_y[,1], k = 6)
write.csv(tr_x,"C:/Users/kimna/Desktop/졸업작품/test0524.csv")
tr_y[,1] = lag_k(tr_y[,1], k = 6)
write.csv(tr_x,"C:/Users/kimna/Desktop/졸업작품/test0524_x.csv")
write.csv(tr_y,"C:/Users/kimna/Desktop/졸업작품/test0524_y.csv")
names(tr_y)
tr_y[,1] = lag_k(tr_y[,1], k = 6)
View(tr_y)
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/land_anal0524.csv")
#객체의 이름을 반환
names(df)
View(df)
#df벡터에서 -c(7,8)을 (전국, 서울소비심리지수) 제외한 나머지만
df = df[,-c(7,8)]
df_tr = df
names(df_tr)
View(df_tr)
#lag_k라는 함수 만듦
#lag_k()기능 : k만큼 lag을 줌
lag_k = function (x,k) c(matrix(NA,k), x[1:(length(x)-k)])
#경제지표 데이터 독립변수 선언★
tr_x = df_tr[,3:41]
names(tr_x)
#부동산가격 데이터 종속변수 선언★
tr_y  = df_tr[,42:58]
names(tr_y)
#코스피지수평균에 6개월 Lag을 줌
tr_x[,31] = lag_k(tr_x[,31], k = 6)
View(tr_x)
tr_y[,1] = lag_k(tr_y[,1], k = 6)
View(tr_y)
write.csv(tr_x,"C:/Users/kimna/Desktop/졸업작품/test0524_x.csv")
write.csv(tr_y,"C:/Users/kimna/Desktop/졸업작품/test0524_y.csv")
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/land_anal0524.csv")
#객체의 이름을 반환
names(df)
View(df)
#df벡터에서 -c(7,8)을 (전국, 서울소비심리지수) 제외한 나머지만
df = df[,-c(7,8)]
df_tr = df
names(df_tr)
View(df_tr)
#lag_k라는 함수 만듦
#lag_k()기능 : k만큼 lag을 줌
lag_k = function (x,k) c(matrix(NA,k), x[1:(length(x)-k)])
#경제지표 데이터 독립변수 선언★
tr_x = df_tr[,3:41]
names(tr_x)
#부동산가격 데이터 종속변수 선언★
tr_y  = df_tr[,42:58]
names(tr_y)
#코스피지수평균에 6개월 Lag을 줌
tr_x[,31] = lag_k(tr_x[,31], k = 6)
View(tr_x)
tr_y[,1] = lag_k(tr_y[,1], k = 12)
View(tr_y)
write.csv(tr_x,"C:/Users/kimna/Desktop/졸업작품/test0524_x.csv")
write.csv(tr_y,"C:/Users/kimna/Desktop/졸업작품/test0524_y.csv")
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/test0525.csv")
#객체의 이름을 반환
names(df)
View(df)
#lag_k라는 함수 만듦
#lag_k()기능 : k만큼 lag을 줌
lag_k = function (x,k) c(matrix(NA,k), x[1:(length(x)-k)])
plot( df$원달러환율,c(NA,diff(df$전국)))
plot(diff(df$원달러환율), type = "l")
plot(df$전국,c(NA,diff(df$소비소비자물가지수)))
plot(df$소비자물가지수,c(NA,diff(df$전국)))
plot(df$소비자물가지수,c(diff(df$전국)))
plot(c(NA,df$소비자물가지수),diff(df$전국))
plot(df$소비자물가지수,c(NA,diff(df$전국)))
plot(df$전국,c(NA,diff(df$소비자물가지수)))
plot(df$전국,c(NA,diff(df$재산세.부과액)))
plot(df$전국,c(NA,diff(df$X1인당.국민총소득.명목..원화..만원.)))
plot(df$전국,c(NA,diff(df$코스피지수평균)))
plot(df$코스피대비집값,c(NA,diff(df$원원달러환율)))
plot(df$코스피대비집값,c(NA,diff(df$원원달러환율)))
plot(c(NA,df$코스피대비집값),c(NA,diff(df$원원달러환율)))
plot(df$코스피대비집값,c(NA,diff(df$원원달러환율)))
plot(df$코스피대비집값,c(NA,diff(df$원달러환율)))
plot(df$국민총소득대비집값,c(NA,diff(df$한국대출금리)))
plot(df$전국,c(NA,diff(df$원달러환율)))
plot(df$전국,c(NA,diff(df$한국대출금리)))
plot(df$전국,c(NA,diff(df$소비자물가지수)))
plot(df$전국,c(NA,diff(df$X1인당.국민총소득.명목..원화..만원.)))
plot(df$전국,c(NA,diff(df$코스피지수평균)))
plot(df$전국,c(NA,diff(df$원달러환율)))
plot(df$전국,c(NA,diff(df$한국대출금리)))
plot(df$코스피대비집값,c(NA,diff(df$원달러환율)))
plot(df$국민총소득대비집값,c(NA,diff(df$한국대출금리)))
plot(diff(df$원달러환율), type = "l")
plot(df$원달러환율,c(NA,diff(df$전국)))
plot(df$X1인당.국민총소득.명목..원화..만원.,c(NA,diff(df$전국)))
plot(df$코스피지수평균,c(NA,diff(df$전국)))
plot(df$소비자물가지수,c(NA,diff(df$전국)))
plot(df$X1인당.국민총소득.명목..원화..만원.,c(NA,diff(df$전국)))
plot(df$한국대출금리,c(NA,diff(df$전국)))
plot(df$원달러환율,c(NA,diff(df$코스피대비집값)))
plot(df$한국대출금리,c(NA,diff(df$국민총소득대비집값)))
plot(df$전국,c(NA,diff(df$소비자물가지수)))
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/test0525.csv")
#객체의 이름을 반환
names(df)
View(df)
df_tr = df
#lag_k라는 함수 만듦
#lag_k()기능 : k만큼 lag을 줌
lag_k = function (x,k) c(matrix(NA,k), x[1:(length(x)-k)])
plot( df$원달러환율,c(NA,diff(df$전국)))
plot(diff(df$원달러환율), type = "l")
#diff(경제지표)와 집값 비교
plot(df$전국,c(NA,diff(df$소비자물가지수)))
plot(df$전국,c(NA,diff(df$X1인당.국민총소득.명목..원화..만원.)))
plot(df$전국,c(NA,diff(df$코스피지수평균)))
plot(df$전국,c(NA,diff(df$원달러환율)))
plot(df$전국,c(NA,diff(df$원달러환율)))
plot(df$전국,c(NA,diff(df$한국대출금리)))
plot(df$코스피대비집값,c(NA,diff(df$원달러환율)))
plot(df$국민총소득대비집값,c(NA,diff(df$한국대출금리)))
#diff(집값)과 경제지표 비교
plot(df$소비자물가지수,c(NA,diff(df$전국)))
#diff(집값)과 경제지표 비교
plot(df$소비자물가지수,c(NA,diff(df$전국)))
plot(df$X1인당.국민총소득.명목..원화..만원.,c(NA,diff(df$전국)))
plot(df$코스피지수평균,c(NA,diff(df$전국)))
plot(df$원달러환율,c(NA,diff(df$전국)))
plot(df$한국대출금리,c(NA,diff(df$전국)))
plot(df$원달러환율,c(NA,diff(df$코스피대비집값)))
plot(df$한국대출금리,c(NA,diff(df$국민총소득대비집값)))
df = read.csv(file="C:/Users/kimna/Desktop/land/test0525.csv")
diff전국 <- c(diff(df$전국))
diff코스피대비집값 <- c(diff(df$코스피대비집값))
diff국민총소득대비집값 <- c(diff(df$국민총소득대비집값))
diff국민총소득 <- c(diff(df$X1인당.국민총소득.명목..원화..만원.))
diff소비자물가지수 <- c(diff(df$소비자물가지수))
diff코스피지수평균 <- c(diff(df$코스피지수평균))
diff원달러환율 <- c(diff(df$원달러환율))
diff한국대출금리 <- c(diff(df$한국대출금리))
차이 <- cbind(diff전국,diff코스피대비집값,diff국민총소득대비집값,
diff국민총소득, diff소비자물가지수, diff코스피지수평균,
diff원달러환율, diff한국대출금리)
write.csv(차이,"C:/Users/kimna/Desktop/졸업작품/test0525_3.csv")
View(차이이)
View(차이)
