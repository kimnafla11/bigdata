install.packages(c("dynlm", "glmnet", "pls", "randomForest"))
## 집값  분석
#install.packages("dynlm")
library(dynlm)
library(MASS)
df = read.csv(C:/Users/kimna/Desktop/land/land0504.csv)
df = read.csv("C:/Users/kimna/Desktop/land/land0504.csv")
df = read.csv("c:/Users/kimna/Desktop/land/land0504.csv")
df = read.csv("c:/Users/kimna/Desktop/land/land0504.csv")
df = read.csv("c:/Users/kimna/Desktop/land/land0504.csv")
df = read.csv(file="C:/Users/kimna/Desktop/land/land0504.csv")
df = read.csv(file="C:/Users/kimna/Desktop/land/land0504.csv")
df = read.csv(file="C:/Users/kimna/Desktop/land/land0504.csv",header=T)
df = read.csv(file="C:/Users/kimna/Desktop/land/land0517.csv",header=T)
head(df)
df = read.csv(file="C:/Users/kimna/Desktop/land/land0517.csv")
view(df)
head(df)
names(df)
df = read.csv(file="C:/Users/kimna/Desktop/land/land0517.csv")
names(df)
#변수명 출력
names(df)
df = df[,-c(7,8)]
df_tr = df
View(df_tr)
df = df[,-c(7,8)]
df_tr = df
view(df_tr)
View(df_tr)
lag_k = function (x,k) c(matrix(NA,k), x[1:(length(x)-k)])
names(df_tr)
View(df_tr)
#### rsqure룰 최대화 시키는 법
rsqmat = matrix(0,30,1)
for (i in 1:30){
tr_x = df_tr[,3:29]
tr_y  = df_tr[,30:46]
for (j in 1:ncol(tr_x)){
tr_x[,j] = lag_k(tr_x[,j], k = i)
}
df = cbind(tr_x, tr_y)
df2= na.omit(df)
fit = lm(df2$전국~ ., data = df2[1:28])
summ = summary(fit)
rsqmat[i,] = summ$r.squared
print(max(rsqmat))
}
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/land0517.csv")
#변수명 출력
names(df)
d = c(1,2,3,4,5,6,7,8,9,10)
dd = diff(d)
dd
lag_k(d,k=2)
#df벡터에서 -c(7,8)을 제외한 나머지만
df = df[,-c(7,8)]
df_tr = df
View(df_tr)
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/land0517.csv")
#객체의 이름을 반환
names(df)
View(df)
View(df)
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/land_anal_test.csv")
#객체의 이름을 반환
names(df)
#df벡터에서 -c(7,8)을 제외한 나머지만
df = df[,-c(7,8)]
df_tr = df
View(df_tr)
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/land_anal_test.csv")
#객체의 이름을 반환
names(df)
View(df)
#lag_k라는 함수 만듦
#lag_k()기능 : k만큼 lag을 줌
lag_k = function (x,k) c(matrix(NA,k), x[1:(length(x)-k)])
names(df_tr)
View(df_tr)
#csv파일 불러오기
df = read.csv(file="C:/Users/kimna/Desktop/land/land_anal_test.csv")
#객체의 이름을 반환
names(df)
View(df)
#df벡터에서 -c(7,8)을 (전국, 서울소비심리지수) 제외한 나머지만
df = df[,-c(7,8)]
df_tr = df
names(df_tr)
View(df_tr)
#lag_k라는 함수 만듦
#lag_k()기능 : k만큼 lag을 줌
lag_k = function (x,k) c(matrix(NA,k), x[1:(length(x)-k)])
#### rsqure를 최대화 시키는 법
rsqmat = matrix(0,30,1)
#### rsqure를 최대화 시키는 법
rsqmat = matrix(0,30,1)
rsqmat
rsqmat
#1부터 30까지 반복
for (i in 1:30){
#경제지표 데이터
tr_x = df_tr[,3:29]
#부동산가격 데이터
tr_y  = df_tr[,30:46]
#j부터 tr_x의 열 수 까지 반복
for (j in 1:ncol(tr_x)){
#tr_x에 1~30 Lag을 줌
tr_x[,j] = lag_k(tr_x[,j], k = i)
}
#cbind()함수 : 벡터를 묶어 행렬로 표현
#경제지표데이터에 Time Lag을 설정하고 df에 저장
df = cbind(tr_x, tr_y)
#na.omit()함수 : NA제거함
df2= na.omit(df)
#leanear regression
fit = lm(df2$전국~ ., data = df2[1:28])
summ = summary(fit)
#summary에서 나온 r square값을 rsqmat라는 행렬 변수에 1부터 30까지 저장
rsqmat[i,] = summ$r.squared
#rsquare가 최대일 때 출력
print(max(rsqmat))
}
#1부터 30까지 반복
for (i in 1:30){
#경제지표 데이터
tr_x = df_tr[,3:29]
#부동산가격 데이터
tr_y  = df_tr[,30:46]
#j부터 tr_x의 열 수 까지 반복
for (j in 1:ncol(tr_x)){
#tr_x에 1~30 Lag을 줌
tr_x[,j] = lag_k(tr_x[,j], k = i)
}
#cbind()함수 : 벡터를 묶어 행렬로 표현
#경제지표데이터에 Time Lag을 설정하고 df에 저장
df = cbind(tr_x, tr_y)
#na.omit()함수 : NA제거함
df2= na.omit(df)
#leanear regression
fit = lm(df2$전국~ ., data = df2[1:28])
summ = summary(fit)
#summary에서 나온 r square값을 rsqmat라는 행렬 변수에 1부터 30까지 저장
rsqmat[i,] = summ$r.squared
#rsquare가 최대일 때 출력
print(rsqmat)
}
#1부터 30까지 반복
for (i in 1:30){
#경제지표 데이터
tr_x = df_tr[,3:29]
#부동산가격 데이터
tr_y  = df_tr[,30:46]
#j부터 tr_x의 열 수 까지 반복
for (j in 1:ncol(tr_x)){
#tr_x에 1~30 Lag을 줌
tr_x[,j] = lag_k(tr_x[,j], k = i)
}
#cbind()함수 : 벡터를 묶어 행렬로 표현
#경제지표데이터에 Time Lag을 설정하고 df에 저장
df = cbind(tr_x, tr_y)
#na.omit()함수 : NA제거함
df2= na.omit(df)
#leanear regression
fit = lm(df2$전국~ ., data = df2[1:28])
summ = summary(fit)
#summary에서 나온 r square값을 rsqmat라는 행렬 변수에 1부터 30까지 저장
rsqmat[i,] = summ$r.squared
#rsquare가 최대일 때 출력
print(max(rsqmat))
}
print(df2)
View(df2)
plot(rsqmat, type = "l", lwd = 2)
colors()
#산점도 rsqmat, type="l"선으로 표현, lwd는 선의 굵기
plot(rsqmat, type = "l", lwd = 2, col="plum2")
#산점도 rsqmat, type="l"선으로 표현, lwd는 선의 굵기, col은 색깔
plot(rsqmat, type = "l", lwd = 2, col="tomato4")
#산점도 rsqmat, type="l"선으로 표현, lwd는 선의 굵기, col은 색깔
plot(rsqmat, type = "l", lwd = 2, col="tomato2")
#산점도 rsqmat, type="l"선으로 표현, lwd는 선의 굵기, col은 색깔
plot(rsqmat, type = "l", lwd = 2, col="mintcream")
#산점도 rsqmat, type="l"선으로 표현, lwd는 선의 굵기, col은 색깔
plot(rsqmat, type = "l", lwd = 2, col="mintcream")
#산점도 rsqmat, type="l"선으로 표현, lwd는 선의 굵기, col은 색깔
plot(rsqmat, type = "l", lwd = 2, col="plum2")
